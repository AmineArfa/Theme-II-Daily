 I've analyzed the code, identified the cause of the vertical tag display issue, and developed a plan to not only fix it but also to significantly revamp the homepage layout for a cleaner, more modern user experience.

1. Root Cause of the Vertical Tag Issue
The problem is in your CSS file. The class responsible for styling the topic tags has a property that forces the text to break in an unnatural way on small screens.

File: assets/css/screen.css

Selector: .gh-topic-tag

Problematic Property: writing-mode: vertical-rl;

This CSS rule tells the browser to render the text vertically, from right to left, which is causing the tag names to appear as single letters stacked on top of each other.

Quick Fix:
To immediately resolve this, you can add a media query to your CSS to disable this property on mobile devices.

Add this code to the end of assets/css/screen.css:

CSS

@media (max-width: 767px) {
    .gh-topic-tag {
        writing-mode: initial; /* Resets to default horizontal writing */
        text-orientation: mixed; /* Ensures proper orientation */
    }
}
This will make the tags display horizontally on mobile, fixing the immediate readability problem. However, I highly recommend a more thorough revamp as outlined below.

2. Proposed UI/UX Revamp: A Modern Grid Layout
The current layout, even with the fix, can be improved to better match modern news websites. I propose moving to a clean, responsive grid system that is more intuitive and visually appealing on all devices.

This new design will feature:

A prominent "featured article" at the top.

A clear, responsive grid for the rest of the articles.

Improved tag visibility without compromising space.

Hereâ€™s how to implement it:

Step 1: Update the HTML Structure (home.hbs)
First, we'll simplify and restructure the main home.hbs file to use a more modern and semantic layout.

File to Edit: home.hbs

Instructions:
Replace the entire content of home.hbs with the code below. This new structure removes the old topic-based sections and introduces a cleaner loop with a special class for the first post.

Handlebars

{{!< default}}

{{#post}}
    {{#if feature_image}}
        {{> feature-image}}
    {{/if}}
{{/post}}

<main class="gh-main">
    <div class="gh-container">
        <h2 class="gh-page-title">Latest Articles</h2>

        <div class="gh-article-grid">
            {{#foreach posts}}
                {{!-- The first post will be a featured hero --}}
                {{#if @first}}
                    <article class="gh-article gh-article-featured {{post_class}}">
                        <a href="{{url}}" class="gh-article-link">
                            {{#if feature_image}}
                                <img class="gh-article-image"
                                    srcset="{{img_url feature_image size="s"}} 300w,
                                            {{img_url feature_image size="m"}} 600w,
                                            {{img_url feature_image size="l"}} 1000w,
                                            {{img_url feature_image size="xl"}} 2000w"
                                    sizes="(max-width: 1000px) 400px, 720px"
                                    src="{{img_url feature_image size="m"}}"
                                    alt="{{#if feature_image_alt}}{{feature_image_alt}}{{else}}{{title}}{{/if}}"
                                />
                            {{/if}}
                            <div class="gh-article-content">
                                <header class="gh-article-header">
                                    {{#primary_tag}}
                                        <span class="gh-article-tag">{{name}}</span>
                                    {{/primary_tag}}
                                    <h2 class="gh-article-title">{{title}}</h2>
                                </header>
                                <div class="gh-article-excerpt">
                                    <p>{{excerpt}}</p>
                                </div>
                            </div>
                        </a>
                    </article>
                {{else}}
                    {{!-- All other posts will be in a standard card format --}}
                    <article class="gh-article {{post_class}}">
                         <a href="{{url}}" class="gh-article-link">
                            {{#if feature_image}}
                                <img class="gh-article-image"
                                    srcset="{{img_url feature_image size="s"}} 300w,
                                            {{img_url feature_image size="m"}} 600w,
                                            {{img_url feature_image size="l"}} 1000w"
                                    sizes="(max-width: 767px) 100vw, 350px"
                                    src="{{img_url feature_image size="m"}}"
                                    alt="{{#if feature_image_alt}}{{feature_image_alt}}{{else}}{{title}}{{/if}}"
                                />
                            {{/if}}
                            <div class="gh-article-content">
                                <header class="gh-article-header">
                                     {{#primary_tag}}
                                        <span class="gh-article-tag">{{name}}</span>
                                    {{/primary_tag}}
                                    <h3 class="gh-article-title">{{title}}</h3>
                                </header>
                            </div>
                        </a>
                    </article>
                {{/if}}
            {{/foreach}}
        </div>

        {{pagination}}

    </div>
</main>
Step 2: Add New CSS for the Grid Layout
Next, add the necessary CSS to style our new grid system. This code is fully responsive and will create the desired layout on both desktop and mobile.

File to Edit: assets/css/screen.css

Instructions:
Add the following CSS rules to the end of the file.

CSS

/* New Article Grid Styles */
.gh-page-title {
    font-size: 2.8rem;
    font-weight: 700;
    margin-bottom: 32px;
    text-align: left;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: 16px;
}

.gh-article-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 32px;
}

.gh-article {
    background: var(--color-white);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.gh-article:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.1);
}

body.is-head-dark .gh-article {
    background-color: var(--color-darkgrey);
    color: var(--color-white);
}

.gh-article-link {
    display: block;
    text-decoration: none;
    color: inherit;
}

.gh-article-image {
    width: 100%;
    height: auto;
    object-fit: cover;
}

.gh-article-content {
    padding: 20px;
}

.gh-article-header {
    margin-bottom: 12px;
}

.gh-article-tag {
    display: inline-block;
    background: var(--ghost-accent-color);
    color: #fff;
    font-size: 1.1rem;
    font-weight: 600;
    padding: 4px 10px;
    border-radius: 20px;
    margin-bottom: 12px;
    text-transform: uppercase;
}

.gh-article-title {
    font-size: 1.8rem;
    font-weight: 600;
    line-height: 1.3;
    margin: 0;
}

.gh-article-featured .gh-article-title {
    font-size: 2.6rem;
}

.gh-article-excerpt p {
    font-size: 1.4rem;
    line-height: 1.6;
    margin: 0;
    opacity: 0.8;
}

/* Responsive Grid Adjustments */
@media (min-width: 768px) {
    .gh-article-grid {
        grid-template-columns: repeat(2, 1fr);
    }
    .gh-article-featured {
        grid-column: 1 / -1; /* The first article spans the full width */
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 32px;
    }
    .gh-article-featured .gh-article-image {
        height: 100%;
    }
}

@media (min-width: 1200px) {
    .gh-article-grid {
        grid-template-columns: repeat(3, 1fr);
    }
}
By implementing these changes, you will have a modern, professional, and highly readable homepage that looks great on any device.